package com.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.model.GeneratorConfiguration;
import com.view.GeneratorPanel;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Service for managing generator configurations.
 * Handles saving and loading of configuration files in JSON format.
 */
public class ConfigurationService {
    
    private static final String CONFIG_EXTENSION = ".json";
    private static final String DEFAULT_CONFIG_NAME = "generator-config";
    
    private final ObjectMapper objectMapper;
    private File lastSaveLocation;
    
    public ConfigurationService() {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
    }
    
    /**
     * Save current UI configuration to a JSON file
     */
    public boolean saveConfiguration(Component parent, String templateFormat, int batchSize, 
                                   int evaluatorCount, List<Component> generatorComponents) {
        try {
            // Create configuration object
            GeneratorConfiguration config = createConfigurationFromUI(
                templateFormat, batchSize, evaluatorCount, generatorComponents);
            
            // Show save dialog
            JFileChooser fileChooser = createFileChooser("Save Configuration", true);
            if (lastSaveLocation != null) {
                fileChooser.setCurrentDirectory(lastSaveLocation.getParentFile());
            }
            
            int result = fileChooser.showSaveDialog(parent);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                
                // Add extension if not present
                if (!file.getName().toLowerCase().endsWith(CONFIG_EXTENSION)) {
                    file = new File(file.getAbsolutePath() + CONFIG_EXTENSION);
                }
                
                // Update metadata
                config.getMetadata().setLastModified(getCurrentTimestamp());
                config.getMetadata().setName(getFileNameWithoutExtension(file));
                
                // Save to file
                objectMapper.writeValue(file, config);
                lastSaveLocation = file;
                
                return true;
            }
        } catch (Exception e) {
            showErrorDialog(parent, "Save Error", 
                "Failed to save configuration: " + e.getMessage());
        }
        return false;
    }
    
    /**
     * Load configuration from a JSON file
     */
    public GeneratorConfiguration loadConfiguration(Component parent) {
        try {
            // Show open dialog
            JFileChooser fileChooser = createFileChooser("Load Configuration", false);
            if (lastSaveLocation != null) {
                fileChooser.setCurrentDirectory(lastSaveLocation.getParentFile());
            }
            
            int result = fileChooser.showOpenDialog(parent);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                
                // Load from file
                GeneratorConfiguration config = objectMapper.readValue(file, GeneratorConfiguration.class);
                lastSaveLocation = file;
                
                return config;
            }
        } catch (Exception e) {
            showErrorDialog(parent, "Load Error", 
                "Failed to load configuration: " + e.getMessage());
        }
        return null;
    }
    
    /**
     * Create configuration object from current UI state
     */
    private GeneratorConfiguration createConfigurationFromUI(String templateFormat, int batchSize,
                                                            int evaluatorCount, List<Component> generatorComponents) {
        GeneratorConfiguration config = new GeneratorConfiguration();
        config.setTemplateFormat(templateFormat);
        config.setBatchSize(batchSize);
        config.setEvaluatorCount(evaluatorCount);
        
        // Extract generator configurations
        List<GeneratorConfiguration.GeneratorConfig> generators = new ArrayList<>();
        int index = 0;
        
        for (Component comp : generatorComponents) {
            if (comp instanceof GeneratorPanel) {
                GeneratorPanel panel = (GeneratorPanel) comp;
                Map<String, String> properties = panel.getProperties();
                
                GeneratorConfiguration.GeneratorConfig genConfig = 
                    new GeneratorConfiguration.GeneratorConfig();
                genConfig.setIndex(index++);
                genConfig.setType(properties.get("type"));
                genConfig.setProperties(properties);
                genConfig.setEvaluator(panel.getGeneratorIndex() < 0);
                
                generators.add(genConfig);
            }
        }
        
        config.setGenerators(generators);
        
        // Set metadata
        GeneratorConfiguration.ConfigurationMetadata metadata = 
            new GeneratorConfiguration.ConfigurationMetadata();
        metadata.setName(DEFAULT_CONFIG_NAME);
        metadata.setDescription("Generated configuration for template: " + templateFormat);
        metadata.setCreatedDate(getCurrentTimestamp());
        metadata.setLastModified(getCurrentTimestamp());
        
        config.setMetadata(metadata);
        
        return config;
    }
    
    private JFileChooser createFileChooser(String title, boolean forSave) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(title);
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
            "JSON Configuration files", "json"));
        
        if (forSave) {
            fileChooser.setSelectedFile(new File(DEFAULT_CONFIG_NAME + CONFIG_EXTENSION));
        }
        
        return fileChooser;
    }
    
    private String getCurrentTimestamp() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }
    
    private String getFileNameWithoutExtension(File file) {
        String name = file.getName();
        int lastDot = name.lastIndexOf('.');
        return lastDot > 0 ? name.substring(0, lastDot) : name;
    }
    
    private void showErrorDialog(Component parent, String title, String message) {
        JOptionPane.showMessageDialog(parent, message, title, JOptionPane.ERROR_MESSAGE);
    }
}
